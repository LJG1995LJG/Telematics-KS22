#include "can.h"
#include "can_KS22.h"
#include "fsl_common.h"
typedef CAN_Type CAN_HW_t;
//-------------------------------------------------------------------

#define GET_CONTROLLER_CONFIG(_controller)	\
        					&Can_Global.config->CanConfigSet->CanController[(_controller)]

#define GET_CALLBACKS() \
							(Can_Global.config->CanConfigSet->CanCallbacks)

#define GET_PRIVATE_DATA(_controller) \
									&CanUnit[_controller]

#define GET_CONTROLLER_CNT() (CAN_CONTROLLER_CNT)

//-------------------------------------------------------------------

#if ( CAN_DEV_ERROR_DETECT == STD_ON )
#define VALIDATE(_exp,_api,_err ) \
        if( !(_exp) ) { \
          Det_ReportError(MODULE_ID_CAN,0,_api,_err); \
          return CAN_NOT_OK; \
        }

#define VALIDATE_NO_RV(_exp,_api,_err ) \
        if( !(_exp) ) { \
          Det_ReportError(MODULE_ID_CAN,0,_api,_err); \
          return; \
        }

#define DET_REPORTERROR(_x,_y,_z,_q) Det_ReportError(_x, _y, _z, _q)
#else
#define VALIDATE(_exp,_api,_err )
#define VALIDATE_NO_RV(_exp,_api,_err )
#define DET_REPORTERROR(_x,_y,_z,_q)
#endif

#if defined(USE_DEM)
#define VALIDATE_DEM_NO_RV(_exp,_err ) \
        if( !(_exp) ) { \
          Dem_ReportErrorStatus(_err, DEM_EVENT_STATUS_FAILED); \
          return; \
        }
#else
#define VALIDATE_DEM_NO_RV(_exp,_err )
#endif

//-------------------------------------------------------------------

typedef enum
{
  CAN_UNINIT = 0,
  CAN_READY
} Can_DriverStateType;

// Mapping between HRH and Controller//HOH
typedef struct Can_Arc_ObjectHOHMapStruct
{
  CanControllerIdType CanControllerRef;    // Reference to controller
  const Can_HardwareObjectType* CanHOHRef;       // Reference to HOH.
} Can_Arc_ObjectHOHMapType;

/* Type for holding global information used by the driver */
typedef struct {
  Can_DriverStateType initRun;

  // Our config
  const Can_ConfigType *config;

  // One bit for each channel that is configured.
  // Used to determine if validity of a channel
  // 1 - configured
  // 0 - NOT configured
  uint32  configured;
  // Maps the a channel id to a configured channel id
  uint8   channelMap[CAN_CONTROLLER_CNT];

  // This is a map that maps the HTH:s with the controller and Hoh. It is built
  // during Can_Init and is used to make things faster during a transmit.
  Can_Arc_ObjectHOHMapType CanHTHMap[NUM_OF_HTHS];
} Can_GlobalType;

// Global config
Can_GlobalType Can_Global =
{
    .initRun = CAN_UNINIT,
};

/* Type for holding information about each controller */
typedef struct {
  CanIf_ControllerModeType state;
  uint32		lock_cnt;

  // Statistics
  Can_Arc_StatisticsType stats;

  // Data stored for Txconfirmation callbacks to CanIf
  PduIdType swPduHandle; //
} Can_UnitType;

Can_UnitType CanUnit[CAN_CONTROLLER_CNT] =
{
  {
    .state = CANIF_CS_UNINIT,
  },
  {
    .state = CANIF_CS_UNINIT,
  },
};


//-------------------------------------------------------------------
static CAN_HW_t * GetController(int unit)
{
	return ((CAN_HW_t *)(CAN0_BASE + unit*0x1000));
}

//-------------------------------------------------------------------
/**
 * Function that finds the Hoh( HardwareObjectHandle ) from a Hth
 * A HTH may connect to one or several HOH's. Just find the first one.
 *
 * @param hth The transmit handle
 * @returns Ptr to the Hoh
 */
static const Can_HardwareObjectType * Can_FindHoh( Can_Arc_HTHType hth , uint32* controller)
{
    const Can_HardwareObjectType *hohObj;
    const Can_Arc_ObjectHOHMapType *map;
    const Can_ControllerConfigType *canHwConfig;

    map = &Can_Global.CanHTHMap[hth];

    // Verify that this is the correct map
    if (map->CanHOHRef->CanObjectId != hth)
    {
        DET_REPORTERROR(MODULE_ID_CAN, 0, 0x6, CAN_E_PARAM_HANDLE);
    }

    canHwConfig = GET_CONTROLLER_CONFIG(Can_Global.channelMap[map->CanControllerRef]);

    hohObj = map->CanHOHRef;

    // Verify that this is the correct Hoh type
    if ( hohObj->CanObjectType == CAN_OBJECT_TYPE_TRANSMIT)
    {
        *controller = map->CanControllerRef;
        return hohObj;
    }

    DET_REPORTERROR(MODULE_ID_CAN, 0, 0x6, CAN_E_PARAM_HANDLE);

    return NULL;
}
/**
 * Hardware wake ISR for CAN
 *
 * @param unit CAN controller number( from 0 )
 */
static void Can_AbortTx( CAN_HW_t *canHw, Can_UnitType *canUnit ) {
	// Disable Transmit irq

	// check if mb's empty

	// Abort all pending mb's

	// Wait for mb's being emptied
}



/**
 * Hardware wake ISR for CAN
 *
 * @param unit CAN controller number( from 0 )
 */
static void Can_WakeIsr( CanControllerIdType unit ) 
{
	if (GET_CALLBACKS()->ControllerWakeup != NULL)
	{
        GET_CALLBACKS()->ControllerWakeup(unit);
	}
	// 269,270,271
	Can_SetControllerMode(unit, CAN_T_STOP);

	// TODO EcuM_CheckWakeup();
}


/**
 * Hardware error ISR for CAN
 *
 * @param unit CAN controller number( from 0 )
 */
static void Can_ErrIsr( CanControllerIdType unit, uint32_t err_status ) {
  CAN_HW_t *canHw = GetController(unit);
  Can_UnitType *canUnit = GET_PRIVATE_DATA(unit);
  Can_Arc_ErrorType err;
  err.R = 0;

  // Check wake up
  if(err_status & CAN_ESR1_WAKINT_MASK)
  {
	  Can_WakeIsr(unit);
  }

  if(err_status & CAN_ESR1_BOFFINT_MASK)
  {
	canUnit->stats.boffCnt++;
	if (GET_CALLBACKS()->ControllerBusOff != NULL)
	{
        GET_CALLBACKS()->ControllerBusOff(unit);
	}
	Can_SetControllerMode(unit, CAN_T_STOP); // CANIF272

	Can_AbortTx( canHw, canUnit ); // CANIF273
  }

  if (err.R != 0)
  {
    if (GET_CALLBACKS()->Arc_Error != NULL)
    {
        GET_CALLBACKS()->Arc_Error( unit, err );
    }
  }
}


/**
 * ISR for CAN. Normal Rx/operation
 *
 * @param unit CAN controller number( from 0 )
 */
static void Can_RxIsr(CanControllerIdType unit, flexcan_frame_t *frame) {

  CAN_HW_t *canHw= GetController(unit);
  const Can_ControllerConfigType *canHwConfig= GET_CONTROLLER_CONFIG(Can_Global.channelMap[unit]);
  Can_UnitType *canUnit = GET_PRIVATE_DATA(unit);
  const Can_HardwareObjectType *hohObj;

  // Loop over all the Hoh's
  hohObj= canHwConfig->Can_Arc_Hoh;
  --hohObj;
  do {
	++hohObj;

	if (hohObj->CanObjectType == CAN_OBJECT_TYPE_RECEIVE)
	{

		if (GET_CALLBACKS()->RxIndication != NULL)
		{
            GET_CALLBACKS()->RxIndication(hohObj->CanObjectId,
										frame->id,
										frame->length,
										(uint8 *)frame->dataByte3 ); // Next layer will copy
		}
		// Increment statistics
		canUnit->stats.rxSuccessCnt++;
	}
  } while ( !hohObj->Can_Arc_EOL);
}



/**
 * ISR for CAN. Normal Tx operation
 *
 * @param unit CAN controller number( from 0 )
 */
static void Can_TxIsr(CanControllerIdType unit) {
  CAN_HW_t *canHw= GetController(unit);
  const Can_ControllerConfigType *canHwConfig= GET_CONTROLLER_CONFIG(Can_Global.channelMap[unit]);
  Can_UnitType *canUnit = GET_PRIVATE_DATA(unit);
  const Can_HardwareObjectType *hohObj;

  // Loop over all the Hoh's
  hohObj= canHwConfig->Can_Arc_Hoh;
  --hohObj;
  do {
	++hohObj;

	if (hohObj->CanObjectType == CAN_OBJECT_TYPE_TRANSMIT)
	{
		if (GET_CALLBACKS()->TxConfirmation != NULL)
		{
		  GET_CALLBACKS()->TxConfirmation(canUnit->swPduHandle);
		}
		canUnit->swPduHandle = 0;  // Is this really necessary ??
	}
  } while ( !hohObj->Can_Arc_EOL);
}

static void CAN_callback(CAN_Type *base, flexcan_handle_t *handle, status_t status, uint32_t result, void *userData)
{
    CanControllerIdType uint;
    switch((uint32_t)base)
    {
        case CAN0_BASE:
            uint = CAN_CTRL_1;
            break;
        case CAN1_BASE:
            uint = CAN_CTRL_2;
            break;
        default:
            return;
    }
    switch (status)
    {
        case kStatus_FLEXCAN_RxFifoWarning:
            break;
        case kStatus_FLEXCAN_RxIdle:
            break;
        case kStatus_FLEXCAN_TxIdle:
            Can_TxIsr(uint);
            break;
        case kStatus_FLEXCAN_TxSwitchToRx:
            break;
        case kStatus_FLEXCAN_RxFifoIdle:
            Can_RxIsr(uint, handle->rxFifoFrameBuf);
            break;
        case kStatus_FLEXCAN_RxFifoOverflow:
            break;
        case kStatus_FLEXCAN_ErrorStatus:
            Can_ErrIsr(uint, status);
            break;
        case kStatus_FLEXCAN_UnHandled:
            break;
        default:
            break;
    }    
}

#if 0
//-------------------------------------------------------------------

static void Can_RxIsr( int unit );
static void Can_TxIsr( int unit );
static void Can_ErrIsr( int unit );

void Can_1_RxIsr( void  ) {	Can_RxIsr(CAN_CTRL_1); }
void Can_2_RxIsr( void  ) {	Can_RxIsr(CAN_CTRL_2); }

void Can_1_TxIsr( void  ) {	Can_TxIsr(CAN_CTRL_1); }
void Can_2_TxIsr( void  ) {	Can_TxIsr(CAN_CTRL_2); }

void Can_1_ErrIsr( void  ) {	Can_ErrIsr(CAN_CTRL_1); }
void Can_2_ErrIsr( void  ) {	Can_ErrIsr(CAN_CTRL_2); }

static void Can_RxIsr( int unit )
{}
static void Can_TxIsr( int unit )
{}
static void Can_ErrIsr( int unit )
{}

#define INSTALL_HANDLERS(_can_name,_sce,_rx,_tx) \
  do { \
    ISR_INSTALL_ISR2( "Can_Err", _can_name ## _ErrIsr, _sce, 2, 0 ); \
	ISR_INSTALL_ISR2( "Can_Rx",  _can_name ## _RxIsr,  _rx,  2, 0 ); \
	ISR_INSTALL_ISR2( "Can_Tx",  _can_name ## _TxIsr,  _tx,  2, 0 ); \
  } while(0);
#endif

void Can_Init( const Can_ConfigType *config )
{
  Can_UnitType *canUnit;
  const Can_ControllerConfigType *canHwConfig;
  uint32 ctlrId;

  VALIDATE_NO_RV( (Can_Global.initRun == CAN_UNINIT), 0x0, CAN_E_TRANSITION );
  VALIDATE_NO_RV( (config != NULL ), 0x0, CAN_E_PARAM_POINTER );

  // Save config
  Can_Global.config = config;
  Can_Global.initRun = CAN_READY;

  for (int configId=0; configId < CAN_ARC_CTRL_CONFIG_CNT; configId++) {
    canHwConfig = GET_CONTROLLER_CONFIG(configId);
    ctlrId = canHwConfig->CanControllerId;

    // Assign the configuration channel used later..
    Can_Global.channelMap[canHwConfig->CanControllerId] = configId;
    Can_Global.configured |= (1<<ctlrId);

    canUnit = GET_PRIVATE_DATA(ctlrId);
    canUnit->state = CANIF_CS_STOPPED;

    canUnit->lock_cnt = 0;

    // Clear stats
    memset(&canUnit->stats, 0, sizeof(Can_Arc_StatisticsType));
    
#if 0
    // Note!
    // Could install handlers depending on HW objects to trap more errors
    // in configuration
    switch( canHwConfig->CanControllerId ) 
    {
        case CAN_CTRL_1:
            INSTALL_HANDLERS(Can_1, CAN1_SCE_IRQn, CAN1_RX0_IRQn, CAN1_TX_IRQn);	break;
        case CAN_CTRL_2:
            INSTALL_HANDLERS(Can_2, CAN2_SCE_IRQn, CAN2_RX0_IRQn, CAN2_TX_IRQn);	break;
        default:
            return ;
    }
#endif
    
    Can_InitController(ctlrId, canHwConfig);

    // Loop through all Hoh:s and map them into the HTHMap
    const Can_HardwareObjectType* hoh;
    hoh = canHwConfig->Can_Arc_Hoh;
    hoh--;
    do
    {
      hoh++;

      if (hoh->CanObjectType == CAN_OBJECT_TYPE_TRANSMIT)
      {
        Can_Global.CanHTHMap[hoh->CanObjectId].CanControllerRef = canHwConfig->CanControllerId;
        Can_Global.CanHTHMap[hoh->CanObjectId].CanHOHRef = hoh;
      }
    } while (!hoh->Can_Arc_EOL);
  }
  return;    
}

void Can_DeInit(void)
{
  Can_UnitType *canUnit;
  const Can_ControllerConfigType *canHwConfig;
  uint32 ctlrId;

  for (int configId=0; configId < CAN_ARC_CTRL_CONFIG_CNT; configId++) {
    canHwConfig = GET_CONTROLLER_CONFIG(configId);
    ctlrId = canHwConfig->CanControllerId;

    canUnit = GET_PRIVATE_DATA(ctlrId);
    canUnit->state = CANIF_CS_UNINIT;

    Can_DisableControllerInterrupts(ctlrId);

    canUnit->lock_cnt = 0;

    // Clear stats
    memset(&canUnit->stats, 0, sizeof(Can_Arc_StatisticsType));
  }

  Can_Global.config = NULL;
  Can_Global.initRun = CAN_UNINIT;

  return;    
}
void Can_InitController( uint8 controller, const Can_ControllerConfigType *config)
{
    CAN_HW_t *canHw;
    Can_UnitType *canUnit;
    uint8 cId = controller;
    const Can_ControllerConfigType *canHwConfig;
    const Can_HardwareObjectType *hohObj;

    VALIDATE_NO_RV( (Can_Global.initRun == CAN_READY), 0x2, CAN_E_UNINIT );
    VALIDATE_NO_RV( (config != NULL ), 0x2,CAN_E_PARAM_POINTER);
    VALIDATE_NO_RV( (controller < GET_CONTROLLER_CNT()), 0x2, CAN_E_PARAM_CONTROLLER );

    canUnit = GET_PRIVATE_DATA(controller);

    VALIDATE_NO_RV( (canUnit->state==CANIF_CS_STOPPED), 0x2, CAN_E_TRANSITION );

    canHw = GetController(cId);
    canHwConfig = GET_CONTROLLER_CONFIG(Can_Global.channelMap[cId]);
    CAN_Initialize(cId, CAN_callback, canHwConfig->CanControllerBaudRate);
    
    if(canHwConfig->Can_Arc_Hoh->CanObjectType == CAN_OBJECT_TYPE_RECEIVE)
    {
        CAN_ReceiveFIFOConfig(cId, 
                              canHwConfig->Can_Arc_Hoh->CanFilterMaskRef, 
                              canHwConfig->Can_Arc_Hoh->FilterCnt);
    }

    FLEXCAN_Enable(canHw, true);
    canUnit->state = CANIF_CS_STOPPED;
//    Can_EnableControllerInterrupts(cId);

    return;    
}

Can_ReturnType Can_SetControllerMode( uint8 controller, Can_StateTransitionType transition )
{
//    imask_t state;
    CAN_HW_t *canHw;
    Can_ReturnType rv = CAN_OK;
    VALIDATE( (controller < GET_CONTROLLER_CNT()), 0x3, CAN_E_PARAM_CONTROLLER );

    Can_UnitType *canUnit = GET_PRIVATE_DATA(controller);

    VALIDATE( (canUnit->state!=CANIF_CS_UNINIT), 0x3, CAN_E_UNINIT );
    canHw = GetController(controller);

    switch(transition )
    {
        case CAN_T_START:
            canUnit->state = CANIF_CS_STARTED;
    //        Irq_Save(state);
            if (canUnit->lock_cnt == 0){   // REQ CAN196
              Can_EnableControllerInterrupts(controller);
            }
    //        Irq_Restore(state);
            break;
        case CAN_T_WAKEUP:
            VALIDATE(canUnit->state == CANIF_CS_SLEEP, 0x3, CAN_E_TRANSITION);
            
            canUnit->state = CANIF_CS_STOPPED;

            break;
        case CAN_T_SLEEP:  //CAN258, CAN290

            // Should be reported to DEM but DET is the next best
            VALIDATE(canUnit->state == CANIF_CS_STOPPED, 0x3, CAN_E_TRANSITION);
            
            canUnit->state = CANIF_CS_SLEEP;
            break;
        case CAN_T_STOP:
            // Stop
            canUnit->state = CANIF_CS_STOPPED;
            Can_AbortTx( canHw, canUnit ); // CANIF282
            break;
        default:
            // Should be reported to DEM but DET is the next best
            VALIDATE(canUnit->state == CANIF_CS_STOPPED, 0x3, CAN_E_TRANSITION);
        break;
    }

    return rv;    
}

void Can_DisableControllerInterrupts( uint8 controller )
{
//    imask_t state;
    Can_UnitType *canUnit;
    CAN_HW_t *canHw;

    VALIDATE_NO_RV( (controller < GET_CONTROLLER_CNT()), 0x4, CAN_E_PARAM_CONTROLLER );

    canUnit = GET_PRIVATE_DATA(controller);

    VALIDATE_NO_RV( (canUnit->state!=CANIF_CS_UNINIT), 0x4, CAN_E_UNINIT );

//    Irq_Save(state);
    if(canUnit->lock_cnt > 0 )
    {
    // Interrupts already disabled
    canUnit->lock_cnt++;
//    Irq_Restore(state);
    return;
    }
    canUnit->lock_cnt++;
//    Irq_Restore(state);

    /* Don't try to be intelligent, turn everything off */
    canHw = GetController(controller);

    FLEXCAN_DisableInterrupts(canHw, kFLEXCAN_BusOffInterruptEnable 
                                   | kFLEXCAN_ErrorInterruptEnable
                                   | kFLEXCAN_RxWarningInterruptEnable
                                   | kFLEXCAN_TxWarningInterruptEnable
                                   | kFLEXCAN_WakeUpInterruptEnable);
    return ;
}

void Can_EnableControllerInterrupts( uint8 controller )
{
//    imask_t state;
    Can_UnitType *canUnit;
    CAN_HW_t *canHw;
    const Can_ControllerConfigType *canHwConfig;
    VALIDATE_NO_RV( (controller < GET_CONTROLLER_CNT()), 0x5, CAN_E_PARAM_CONTROLLER );

    canUnit = GET_PRIVATE_DATA(controller);

    VALIDATE_NO_RV( (canUnit->state!=CANIF_CS_UNINIT), 0x5, CAN_E_UNINIT );

//    Irq_Save(state);
    if( canUnit->lock_cnt > 1 )
    {
        // IRQ should still be disabled so just decrement counter
        canUnit->lock_cnt--;
//    Irq_Restore(state);
        return;
    } else if (canUnit->lock_cnt == 1)
    {
        canUnit->lock_cnt = 0;
    }
//    Irq_Restore(state);

    canHw = GetController(controller);

    canHwConfig = GET_CONTROLLER_CONFIG(Can_Global.channelMap[controller]);

    if( canHwConfig->CanRxProcessing == CAN_ARC_PROCESS_TYPE_INTERRUPT )
    {
        /* Turn on the rx interrupt */
//        EnableIRQ((IRQn_Type)(CAN_Rx_Warning_IRQS[controller]));
    
    }
    if( canHwConfig->CanTxProcessing == CAN_ARC_PROCESS_TYPE_INTERRUPT ) 
    {
        /* Turn on the tx interrupt mailboxes */
//        EnableIRQ(CAN_Rx_Warning_IRQS[controller]);
    }

    // BusOff here represents all errors and warnings
    if( canHwConfig->CanBusOffProcessing == CAN_ARC_PROCESS_TYPE_INTERRUPT ) 
    {
        /* Turn on the bus off/tx warning/rx warning and error and rx  */
        FLEXCAN_EnableInterrupts(GetController(controller), kFLEXCAN_BusOffInterruptEnable 
                                                            | kFLEXCAN_ErrorInterruptEnable
                                                            | kFLEXCAN_RxWarningInterruptEnable
                                                            | kFLEXCAN_TxWarningInterruptEnable
                                                            | kFLEXCAN_WakeUpInterruptEnable);
    }

    return;

}
Can_ReturnType Can_Write( Can_Arc_HTHType hth, Can_PduType *pduInfo )
{
    Can_ReturnType rv = CAN_OK;
    CAN_HW_t *canHw;
    const Can_HardwareObjectType *hohObj;
    const Can_ControllerConfigType *canHwConfig;
    uint32 controller;
    /* 2017.5.17 lihaibin modify */
//    imask_t state;
    /*end 2017.5.17 lihaibin modify */
    VALIDATE( (Can_Global.initRun == CAN_READY), 0x6, CAN_E_UNINIT );
    VALIDATE( (pduInfo != NULL), 0x6, CAN_E_PARAM_POINTER );
    VALIDATE( (pduInfo->length <= 8), 0x6, CAN_E_PARAM_DLC );
    VALIDATE( (hth < NUM_OF_HTHS ), 0x6, CAN_E_PARAM_HANDLE );

    hohObj = Can_FindHoh(hth, &controller);
    if (hohObj == NULL)
    {
        return CAN_NOT_OK;
    }

    Can_UnitType *canUnit = GET_PRIVATE_DATA(controller);

    canHw = GetController(controller);
    /* 2017.5.17 lihaibin modify */    
//    Irq_Save(state);
    /*end 2017.5.17 lihaibin modify */

    flexcan_frame_t frame;
    memset(&frame, 0, sizeof(flexcan_frame_t));    
    memcpy((void *)frame.dataByte3, pduInfo->sdu, pduInfo->length);
    
    frame.id = pduInfo->id;
    if (hohObj->CanIdType == CAN_ID_TYPE_EXTENDED) 
    {
        frame.format = kFLEXCAN_FrameFormatExtend;
    }  
    else 
    {
        frame.format = kFLEXCAN_FrameFormatStandard;
    }

    // check for any free box
    if(CAN_SendNoBlocking(controller, &frame) == 0) 
    {
        canHwConfig = GET_CONTROLLER_CONFIG(Can_Global.channelMap[controller]);

        if( canHwConfig->CanTxProcessing == CAN_ARC_PROCESS_TYPE_INTERRUPT ) 
        {
          /* Turn on the tx interrupt mailboxes */
            
        }

        // Increment statistics
        canUnit->stats.txSuccessCnt++;

        // Store pdu handle in unit to be used by TxConfirmation
        canUnit->swPduHandle = pduInfo->swPduHandle;
    } 
    else 
    {
        rv = CAN_BUSY;
    }
//    Irq_Restore(state);

    return rv;   

}
void Can_Cbk_CheckWakeup( uint8 controller )
{}
void Can_MainFunction_Write( void )
{}
void Can_MainFunction_Read( void )
{}
void Can_MainFunction_BusOff( void )
{}
void Can_MainFunction_Error( void )
{}
void Can_MainFunction_Wakeup( void )
{}

void Can_Arc_GetStatistics( uint8 controller, Can_Arc_StatisticsType * stat)
{}
#if defined(CFG_CAN_TEST)
Can_TestType *Can_Arc_GetTestInfo( void  )
{}
#endif